[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "unique_slug_generator",
        "importPath": "myProject.utils",
        "description": "myProject.utils",
        "isExtraImport": true,
        "detail": "myProject.utils",
        "documentation": {}
    },
    {
        "label": "unique_slug_generator1",
        "importPath": "myProject.utils",
        "description": "myProject.utils",
        "isExtraImport": true,
        "detail": "myProject.utils",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic.list",
        "description": "django.views.generic.list",
        "isExtraImport": true,
        "detail": "django.views.generic.list",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.views.static",
        "description": "django.views.static",
        "isExtraImport": true,
        "detail": "django.views.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "Brewer_Cafe_And_Restro",
        "description": "Brewer_Cafe_And_Restro",
        "isExtraImport": true,
        "detail": "Brewer_Cafe_And_Restro",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "isExtraImport": true,
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0001_initial",
        "description": "Brewer_Cafe_And_Restro.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='City',\n            fields=[\n                ('idcity', models.AutoField(primary_key=True, serialize=False)),\n                ('city_name', models.CharField(max_length=45)),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0002_remove_user_idrestaurant_remove_user_pincode",
        "description": "Brewer_Cafe_And_Restro.migrations.0002_remove_user_idrestaurant_remove_user_pincode",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='idrestaurant',\n        ),\n        migrations.RemoveField(",
        "detail": "Brewer_Cafe_And_Restro.migrations.0002_remove_user_idrestaurant_remove_user_pincode",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0003_user_idrestaurant_user_pincode",
        "description": "Brewer_Cafe_And_Restro.migrations.0003_user_idrestaurant_user_pincode",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0002_remove_user_idrestaurant_remove_user_pincode'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='idrestaurant',\n            field=models.ForeignKey(db_column='restaurant_idrestaurant', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Brewer_Cafe_And_Restro.restaurant'),\n        ),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0003_user_idrestaurant_user_pincode",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0004_alter_user_pincode",
        "description": "Brewer_Cafe_And_Restro.migrations.0004_alter_user_pincode",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0003_user_idrestaurant_user_pincode'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='pincode',\n            field=models.ForeignKey(db_column='area_pincode', default='', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Brewer_Cafe_And_Restro.area'),\n        ),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0004_alter_user_pincode",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0005_alter_item_item_category_iditem_category_and_more",
        "description": "Brewer_Cafe_And_Restro.migrations.0005_alter_item_item_category_iditem_category_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0004_alter_user_pincode'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='item_category_iditem_category',\n            field=models.ForeignKey(db_column='item_category_iditem_category', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Brewer_Cafe_And_Restro.itemcategory'),\n        ),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0005_alter_item_item_category_iditem_category_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0006_subcategory_alter_item_item_category_iditem_category",
        "description": "Brewer_Cafe_And_Restro.migrations.0006_subcategory_alter_item_item_category_iditem_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0005_alter_item_item_category_iditem_category_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Subcategory',\n            fields=[\n                ('idsubcategory', models.AutoField(primary_key=True, serialize=False)),\n                ('subcategory_name', models.CharField(max_length=60)),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0006_subcategory_alter_item_item_category_iditem_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.migrations.0007_subcategory_restaurant_idrestaurant",
        "description": "Brewer_Cafe_And_Restro.migrations.0007_subcategory_restaurant_idrestaurant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('Brewer_Cafe_And_Restro', '0006_subcategory_alter_item_item_category_iditem_category'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='subcategory',\n            name='restaurant_idrestaurant',\n            field=models.ForeignKey(db_column='restaurant_idrestaurant', null=True, on_delete=django.db.models.deletion.SET_NULL, to='Brewer_Cafe_And_Restro.restaurant'),\n        ),",
        "detail": "Brewer_Cafe_And_Restro.migrations.0007_subcategory_restaurant_idrestaurant",
        "documentation": {}
    },
    {
        "label": "BrewerCafeAndRestroConfig",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.apps",
        "description": "Brewer_Cafe_And_Restro.apps",
        "peekOfCode": "class BrewerCafeAndRestroConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'Brewer_Cafe_And_Restro'",
        "detail": "Brewer_Cafe_And_Restro.apps",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class City(models.Model):\n    idcity = models.AutoField(primary_key=True)\n    city_name = models.CharField(max_length=45)\n    class Meta:\n        managed = True\n        db_table = 'city'\n    def __str__(self):\n        return self.city_name\nclass Area(models.Model):\n    pincode = models.DecimalField(primary_key=True,max_digits=6, decimal_places=0)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Area",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Area(models.Model):\n    pincode = models.DecimalField(primary_key=True,max_digits=6, decimal_places=0)\n    area_name = models.CharField(max_length=100)\n    area_delivery_charges = models.IntegerField()\n    city_idcity = models.ForeignKey(City,on_delete=models.SET_NULL,null=True, db_column='city_idcity')\n    class Meta:\n        managed = True\n        db_table = 'area'\n    def __str__(self):\n        return self.area_name",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Restaurant",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Restaurant(models.Model):\n    idrestaurant = models.AutoField(primary_key=True)\n    restaurant_name = models.CharField(max_length=45)\n    restaurant_email = models.CharField(max_length=45)\n    restaurant_phone = models.DecimalField(max_digits=10, decimal_places=0,null=True)\n    restaurant_description = models.CharField(max_length=200)\n    restaurant_image = models.ImageField(upload_to=\"media/myImages/\",null=True,blank=True)\n    restaurant_address = models.CharField(max_length=500,null=True)\n    area_pincode = models.ForeignKey(Area,on_delete=models.SET_NULL,null=True, db_column='area_pincode')\n    class Meta:",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class User(models.Model):\n    iduser = models.AutoField(primary_key=True)\n    user_first_name = models.CharField(max_length=25,null=True)\n    user_last_name = models.CharField(max_length=25,null=True)\n    user_name = models.CharField(max_length=15,unique=True)\n    user_password = models.CharField(max_length=300)\n    user_email = models.CharField(max_length=245,unique=True)\n    user_mobile = models.CharField(max_length=10,unique=True)\n    user_address = models.TextField(max_length=200,null=True)\n    user_sec_question = models.CharField(max_length=60,null=True)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "ItemCategory",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class ItemCategory(models.Model):\n    iditem_category = models.AutoField(primary_key=True)\n    item_category_name = models.CharField(max_length=60)\n    slug = models.SlugField(max_length=250,null=True,blank=True)\n    item_category_description = models.CharField(max_length=1000)\n    item_category_image = models.ImageField(upload_to=\"media/item_Category/\",null=True,blank=True)\n    restaurant_idrestaurant = models.ForeignKey(Restaurant, on_delete=models.SET_NULL, null=True, db_column='restaurant_idrestaurant')\n    class Meta:\n        managed = True\n        db_table = 'item_category'",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Subcategory",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Subcategory(models.Model):\n    idsubcategory = models.AutoField(primary_key=True)\n    subcategory_name = models.CharField(max_length=60)\n    slug = models.SlugField(max_length=250, null=True, blank=True)\n    subcategory_description = models.CharField(max_length=1000)\n    subcategory_image = models.ImageField(upload_to=\"media/subcategory/\", null=True, blank=True)\n    item_category = models.ForeignKey(ItemCategory, on_delete=models.CASCADE, related_name='subcategories')\n    restaurant_idrestaurant = models.ForeignKey(Restaurant, on_delete=models.SET_NULL, null=True, db_column='restaurant_idrestaurant')\n    class Meta:\n        managed = True",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Offer",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Offer(models.Model):\n    idoffer = models.AutoField(primary_key=True)\n    offer_value = models.DecimalField(max_digits=2, decimal_places=0)\n    offer_start_date = models.DateField()\n    offer_end_date = models.DateField()\n    offer_description = models.CharField(max_length=200)\n    class Meta:\n        managed = True\n        db_table = 'offer'\n    def __str__(self):",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Item(models.Model):\n    iditem = models.AutoField(primary_key=True)\n    item_name = models.CharField(max_length=60)\n    slug = models.SlugField(max_length=250,null=True,blank=True)\n    item_price = models.IntegerField()\n    offer_price = models.FloatField(default=0)\n    item_description = models.CharField(max_length=200)\n    item_image = models.ImageField(upload_to=\"media/item_images/\",null=True,blank=True)\n    offer_idoffer = models.ForeignKey(Offer,on_delete=models.SET_NULL,null=True, db_column='offer_idoffer')\n    #item_category_iditem_category = models.ForeignKey(ItemCategory,on_delete=models.SET_NULL,null=True, db_column='item_category_iditem_category')",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Cart(models.Model):\n    user_iduser = models.ForeignKey(User, on_delete=models.SET_NULL,null=True, db_column='user_iduser')\n    item_iditem = models.ForeignKey(Item, on_delete=models.SET_NULL,null=True, db_column='item_iditem')\n    offer_record = models.IntegerField(default=1)\n    item_qty = models.IntegerField(null=False,blank=False)\n    class Meta:\n        managed = True\n        db_table = 'cart'\n    def __str__(self):\n        return f'Cart of {self.user_iduser}'",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Order(models.Model):\n    idorder = models.AutoField(primary_key=True)\n    orderfname = models.CharField(max_length=150,null=True)\n    orderlname = models.CharField(max_length=150,null=True)\n    orderemail = models.CharField(max_length=150,null=True)\n    ordermobile = models.CharField(max_length=150,null=True)\n    order_date = models.DateField(auto_now_add=True)\n    cancel_order_date = models.DateTimeField(null=True)\n    order_delivery_date = models.DateTimeField(auto_now_add=True)\n    order_delivery_address = models.TextField(null=False)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "OrderedItem",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class OrderedItem(models.Model):\n    order_idorder = models.ForeignKey(Order,on_delete=models.SET_NULL,null=True, db_column='order_idorder')\n    item_iditem = models.ForeignKey(Item,on_delete=models.SET_NULL,null=True, db_column='item_iditem')\n    price = models.FloatField(null=True)\n    quantity = models.IntegerField(null=True)\n    class Meta:\n        managed = True\n        db_table = 'ordered_item'\n    # def __str__(self):\n    #     return '{} - {}'.format(self.order_idorder,self.order_idorder.tracking_no)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Review(models.Model):\n    idreview = models.AutoField(primary_key=True)\n    subject = models.CharField(max_length=100,blank=True)\n    review_description = models.TextField(max_length=500,blank=True)\n    rating_value = models.FloatField(null=True)\n    status = models.BooleanField(default=True)\n    reviewDate = models.DateField(datetime.date.today,null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    user_iduser = models.ForeignKey(User,on_delete=models.SET_NULL,null=True,db_column='user_iduser')",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Notification(models.Model):\n    idnotification = models.AutoField(primary_key=True)\n    notification_description = models.TextField(max_length=500,blank=True)\n    notificationDate = models.DateField(datetime.date.today,null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        managed = True\n        db_table = 'notification'\n    def __str__(self):",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Table(models.Model):\n    idtable = models.AutoField(primary_key=True)\n    table_capacity = models.IntegerField()\n    class Meta:\n        managed = True\n        db_table = 'table'\n    def __str__(self):\n        return f'Table details - {self.table_capacity}'\nclass TableReservation(models.Model):\n    idtable_reservation = models.AutoField(primary_key=True)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "TableReservation",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class TableReservation(models.Model):\n    idtable_reservation = models.AutoField(primary_key=True)\n    tableResfname = models.CharField(max_length=150,null=True)\n    tableReslname = models.CharField(max_length=150,null=True)\n    tableResemail = models.CharField(max_length=150,null=True)\n    tableResmobile = models.CharField(max_length=150,null=True)\n    table_reservation_date_time = models.DateTimeField(null=True)\n    table_reservation_no_guest = models.IntegerField()\n    table_reservation_total_table_reserved = models.CharField(max_length=45)\n    total_amount = models.IntegerField(null=True)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "TableReservationDetails",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class TableReservationDetails(models.Model):\n    table_reservation_idtable_reservation = models.ForeignKey(TableReservation,on_delete=models.SET_NULL,null=True, db_column='table_reservation_idtable_reservation')\n    table_idtable = models.ForeignKey(Table, on_delete=models.SET_NULL,null=True, db_column='table_idtable')\n    class Meta:\n        managed = True\n        db_table = 'table_reservation_details'\nclass Supplier(models.Model):\n    idsupplier = models.AutoField(primary_key=True)\n    supplier_name = models.CharField(max_length=60)\n    supplier_mobile_no = models.DecimalField(max_digits=10, decimal_places=0)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Supplier",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Supplier(models.Model):\n    idsupplier = models.AutoField(primary_key=True)\n    supplier_name = models.CharField(max_length=60)\n    supplier_mobile_no = models.DecimalField(max_digits=10, decimal_places=0)\n    supplier_address = models.CharField(max_length=200)\n    area_name = models.CharField(max_length=200)\n    pincode = models.DecimalField(max_digits=6, decimal_places=0)\n    restaurant_idrestaurant = models.ForeignKey(Restaurant,on_delete=models.SET_NULL,null=True,db_column='restaurant_idrestaurant')\n    class Meta:\n        managed = True",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "RawMaterial",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class RawMaterial(models.Model):\n    idraw_material = models.AutoField(primary_key=True)\n    raw_material_name = models.CharField(max_length=60)\n    raw_materialtotal_quantity = models.IntegerField()\n    raw_material_price = models.IntegerField()\n    restaurant_idrestaurant = models.ForeignKey(Restaurant,on_delete=models.SET_NULL,null=True,db_column='restaurant_idrestaurant')\n    class Meta:\n        managed = True\n        db_table = 'raw_material'\n    def __str__(self):",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "Purchase",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class Purchase(models.Model):\n    idpurchase = models.AutoField(primary_key=True)\n    purchase_total_amount = models.IntegerField()\n    purchase_date = models.DateField()\n    gst = models.DecimalField(max_digits=3, decimal_places=1,null=True)\n    supplier_idsupplier = models.ForeignKey(Supplier,on_delete=models.SET_NULL,null=True,db_column='supplier_idsupplier')\n    class Meta:\n        managed = True\n        db_table = 'purchase'\nclass PurchaseRawMaterial(models.Model):",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "PurchaseRawMaterial",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class PurchaseRawMaterial(models.Model):\n    raw_material_idraw_material = models.ForeignKey(RawMaterial,on_delete=models.SET_NULL,null=True, db_column='raw_material_idraw_material')\n    purchase_idpurchase = models.ForeignKey(Purchase, on_delete=models.SET_NULL,null=True, db_column='purchase_idpurchase')\n    quantity = models.IntegerField()\n    price = models.IntegerField()\n    class Meta:\n        managed = True\n        db_table = 'purchase_raw_material'\nclass PurchaseReturn(models.Model):\n    idpurchase_return = models.AutoField(primary_key=True)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "PurchaseReturn",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class PurchaseReturn(models.Model):\n    idpurchase_return = models.AutoField(primary_key=True)\n    purchase_return_total_amount = models.IntegerField()\n    purchase_return_date = models.DateField()\n    purchase_idpurchase = models.ForeignKey(Purchase, on_delete=models.SET_NULL,null=True, db_column='purchase_idpurchase')\n    class Meta:\n        managed = True\n        db_table = 'purchase_return'\nclass PurchaseReturnOfRawMaterial(models.Model):\n    raw_material_idraw_material = models.ForeignKey(RawMaterial, on_delete=models.SET_NULL,null=True, db_column='raw_material_idraw_material')",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "PurchaseReturnOfRawMaterial",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class PurchaseReturnOfRawMaterial(models.Model):\n    raw_material_idraw_material = models.ForeignKey(RawMaterial, on_delete=models.SET_NULL,null=True, db_column='raw_material_idraw_material')\n    purchase_return_idpurchase_return = models.ForeignKey(PurchaseReturn,on_delete=models.SET_NULL,null=True, db_column='purchase_return_idpurchase_return')\n    quantity = models.IntegerField()\n    price = models.IntegerField()\n    class Meta:\n        managed = True\n        db_table = 'purchase_return_of_raw_material'\nclass TotalGuest(models.Model):\n    idguest = models.AutoField(primary_key=True)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "TotalGuest",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "class TotalGuest(models.Model):\n    idguest = models.AutoField(primary_key=True)\n    guestNumber = models.IntegerField()\ndef slug_generator(sender, instance, *args, **kwargs):\n    if not instance.slug:\n        instance.slug = unique_slug_generator(instance)\ndef slug_generator1(sender, instance, *args, **kwargs):\n    if not instance.slug:\n        instance.slug = unique_slug_generator1(instance)\npre_save.connect(slug_generator,sender=ItemCategory)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "slug_generator",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "def slug_generator(sender, instance, *args, **kwargs):\n    if not instance.slug:\n        instance.slug = unique_slug_generator(instance)\ndef slug_generator1(sender, instance, *args, **kwargs):\n    if not instance.slug:\n        instance.slug = unique_slug_generator1(instance)\npre_save.connect(slug_generator,sender=ItemCategory)\npre_save.connect(slug_generator1,sender=Item)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "slug_generator1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.models",
        "description": "Brewer_Cafe_And_Restro.models",
        "peekOfCode": "def slug_generator1(sender, instance, *args, **kwargs):\n    if not instance.slug:\n        instance.slug = unique_slug_generator1(instance)\npre_save.connect(slug_generator,sender=ItemCategory)\npre_save.connect(slug_generator1,sender=Item)",
        "detail": "Brewer_Cafe_And_Restro.models",
        "documentation": {}
    },
    {
        "label": "html_to_pdf",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.process",
        "description": "Brewer_Cafe_And_Restro.process",
        "peekOfCode": "def html_to_pdf(template_src, context_dict={}):\n     template = get_template(template_src)\n     html  = template.render(context_dict)\n     result = BytesIO()\n     pdf = pisa.pisaDocument(BytesIO(html.encode(\"ISO-8859-1\")), result)\n     if not pdf.err:\n         return HttpResponse(result.getvalue(), content_type='application/pdf')\n     return None",
        "detail": "Brewer_Cafe_And_Restro.process",
        "documentation": {}
    },
    {
        "label": "CategoryListView",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class CategoryListView(ListView):\n    model = ItemCategory\n    template_name = 'itemcategory_list.html'\n    queryset = ItemCategory.objects.all()\n    def get_queryset(self):\n        q = self.request.GET.get('q')\n        if q:\n            object_list = self.model.objects.filter(Q(item_category_name__icontains=q) | Q(item_category_description__icontains=q))\n        else:\n            object_list = self.model.objects.all()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "ItemListView",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class ItemListView(ListView):\n    model = Subcategory\n    template_name = 'Subcategory.html'\n    def get_queryset(self,*args, **kwargs):\n        q = self.request.GET.get('q')\n        getCategory = ItemCategory.objects.get(slug=self.kwargs['slug_text'])\n        if self.kwargs.get('slug_text'):\n            object_list = Subcategory.objects.filter(item_category=getCategory.iditem_category)\n            if q:\n                object_list = self.model.objects.filter((Q(subcategory_name__icontains=q) | Q(subcategory_description__icontains=q)),item_category=getCategory.iditem_category)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "subitems",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class subitems(ListView):\n    model = Item\n    template_name = 'item.html'\n    def get_queryset(self,*args, **kwargs):\n        q = self.request.GET.get('q')\n        getCategory = Subcategory.objects.get(slug=self.kwargs['slug_text'])\n        if self.kwargs.get('slug_text'):\n            object_list = Item.objects.filter(item_category_iditem_category=getCategory.idsubcategory)\n            if q:\n                object_list = self.model.objects.filter((Q(subcategory_name__icontains=q) | Q(subcategory_description__icontains=q)),item_category=getCategory.iditem_category)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderInvoicePdf",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class orderInvoicePdf(View):\n    def get(self, request, *args, **kwargs):\n        totalOfferPrice = 0\n        totalPrice = 0\n        current_user = request.session['user_name']\n        cusername = User.objects.get(user_name=current_user)\n        u1 = cusername.iduser\n        o1 = Order.objects.get(tracking_no=self.kwargs['t_no'])\n        od1 = OrderedItem.objects.filter(order_idorder=o1.idorder)\n        for i in od1:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderReportGenerateAdmin",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class orderReportGenerateAdmin(View):\n    def get(self, request, *args, **kwargs):\n        if(sdate and edate):\n            o = Order.objects.filter(order_date__range=(sdate,edate),is_cancel_order=0)\n        else:\n            o = Order.objects.filter(is_cancel_order=0)\n        data = {\n            'order':o\n        }\n        open('templates/temp.html',\"w\").write(render_to_string(\"orderReportPdf.html\",{\"data\":data}))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "cancelOrderReportGenerateAdmin",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class cancelOrderReportGenerateAdmin(View):\n    def get(self, request, *args, **kwargs):\n        if(csdate and cedate):\n            o = Order.objects.filter(cancel_order_date__date__range=(csdate,cedate),is_cancel_order=1)\n        else:\n            o = Order.objects.filter(is_cancel_order=1)\n        data = {\n            'cancelOrder':o\n        }\n        open('templates/temp.html',\"w\").write(render_to_string(\"cancelOrderReportPdf.html\",{\"data\":data}))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "offerReportGenerateAdmin",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class offerReportGenerateAdmin(View):\n    def get(self, request, *args, **kwargs):\n        if(Offersdate and Offeredate):\n            o = Offer.objects.filter(offer_start_date__range=(Offersdate,Offeredate), offer_end_date__range=(Offersdate,Offeredate))\n        else:\n            o = Offer.objects.all()\n        data = {\n            'offer':o\n        }\n        open('templates/temp.html',\"w\").write(render_to_string(\"offerReportPdf.html\",{\"data\":data}))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseReportGenerateAdmin",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class purchaseReportGenerateAdmin(View):\n    def get(self, request, *args, **kwargs):\n        if(Offersdate and Offeredate):\n            o = Purchase.objects.filter(purchase_date__range=(Purchasesdate,Purchaseedate))\n        else:\n            o = Purchase.objects.all()\n        data = {\n            'purchase':o\n        }\n        open('templates/temp.html',\"w\").write(render_to_string(\"purchaseReportPdf.html\",{\"data\":data}))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseReturnReportGenerateAdmin",
        "kind": 6,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "class purchaseReturnReportGenerateAdmin(View):\n    def get(self, request, *args, **kwargs):\n        if(PurchaseReturnsdate and PurchaseReturnedate):\n            o = PurchaseReturn.objects.filter(purchase_return_date__range=(PurchaseReturnsdate,PurchaseReturnedate))\n        else:\n            o = PurchaseReturn.objects.all()\n        data = {\n            'purchaseReturn':o\n        }\n        open('templates/temp.html',\"w\").write(render_to_string(\"purchaseReturnReportPdf.html\",{\"data\":data}))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "isFirstThreeCharacterLetter",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def isFirstThreeCharacterLetter(subUname):\n    count = 0\n    firstThreeCh = subUname[0:3]\n    for i in firstThreeCh:\n        if((i >= \"A\" and i <= \"Z\") or (i >= \"a\" and i <= \"z\")):\n            count += 1\n        else:\n            break\n    return count\ndef isStringContainsNumberOrNot(puserFirstName):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "isStringContainsNumberOrNot",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def isStringContainsNumberOrNot(puserFirstName):\n    flag = 1\n    for i in puserFirstName:\n        if((i >= \"A\" and i <= \"Z\") or (i >= \"a\" and i <= \"z\") or (i == \" \")):\n            flag = 0\n        else:\n            flag = 1\n            break\n    if(flag == 1):\n        return True",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "isContainSpace",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def isContainSpace(uName,character):\n    res = None\n    for i in range(0, len(uName)):\n        if uName[i] == character:\n            res = i + 1\n            break\n    if res == None:\n        pass\n    else:\n        return True",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userNameValidation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userNameValidation(uName):\n    error_message = None\n    u4 = User.objects.all()\n    for i in u4:\n        if(i.user_name == uName):\n            error_message = \"Username already taken!\"\n            break\n    return error_message\ndef userEmailValidation(uEmail):\n    error_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userEmailValidation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userEmailValidation(uEmail):\n    error_message = None\n    u4 = User.objects.all()\n    for i in u4:\n        if(i.user_email == uEmail):\n            error_message = \"Email ID already taken!\"\n            break\n    return error_message\ndef userMobileValidation(uMobile):\n    error_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userMobileValidation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userMobileValidation(uMobile):\n    error_message = None\n    u4 = User.objects.all()\n    for i in u4:\n        if(i.user_mobile == uMobile):\n            error_message = \"Mobileno already taken!\"\n            break\n    return error_message\ndef userImageValidation(puserImage):\n    error_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userImageValidation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userImageValidation(puserImage):\n    error_message = None\n    userImage = str(puserImage)\n    if(not(userImage.lower().endswith(('.png','.jpg','.jpeg')))):\n        error_message = \"Choose only image!\"\n    return error_message\ndef validationForgotPassword(userEmail,myUserEmail):\n    error_message = None\n    if(not userEmail):\n        error_message = \"Please enter email!\"",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validationForgotPassword",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validationForgotPassword(userEmail,myUserEmail):\n    error_message = None\n    if(not userEmail):\n        error_message = \"Please enter email!\"\n    elif userEmail:\n        if(userEmail != myUserEmail):\n            error_message = \"Please enter valid email\"\n    return error_message\ndef validationChangePassword(userNewPassword,userNewSamePassword):\n    error_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validationChangePassword",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validationChangePassword(userNewPassword,userNewSamePassword):\n    error_message = None\n    if(not userNewPassword):\n        error_message = \"Please enter new password.!\"\n    elif(userNewPassword):\n        if(len(userNewPassword) < 6 or len(userNewPassword) > 15):\n            error_message = \"Your new password at least 6 character long and not greater than 15 character!\"\n        elif(userNewPassword != userNewSamePassword):\n            error_message = \"Your new password and new same password didn't match!\"            \n    return error_message",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validationChangePasswordDirectly",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validationChangePasswordDirectly(userCurPassword,userNewPassword,userNewSamePassword,flag):\n    error_message = None\n    if(not userCurPassword):\n        error_message = \"Please enter current password!\"\n    elif userCurPassword:\n        if not flag:\n            error_message = \"Your current password is invalid.!\"\n        elif(not userNewPassword):\n            error_message = \"Please enter your new password!\"\n        elif userNewPassword:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validationUserProfile",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validationUserProfile(puserName,puserEmail,puserMobile,puserFirstName,puserLastName,count):\n    regxEmail = re.compile(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')\n    regxMobile = re.compile(\"(0|91)?[-\\s]?[6-9][0-9]{9}\")\n    error_message = None\n    mycharacter = \" \"\n    if(not puserName):\n        error_message = \"Username is must!\"\n    elif(puserName):\n        if (len(puserName) < 6 or len(puserName) > 15):\n            error_message = \"Username atleast 6 character long and maximum 15 character!\"",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validationLogin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validationLogin(username,password,username1,flag):\n    error_message = None\n    if(not username):\n        error_message = \"Please enter username!\"\n    elif username:\n            if not password:\n                error_message = \"Please enter password!\"\n            elif(username != username1):\n                error_message = \"Invalid username or password!\"\n            elif not flag:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def home(request):\n    if 'user_name' in request.session:\n        current_user = request.session['user_name'] \n        object_list = ItemCategory.objects.all()\n        param = {'current_user':current_user,\"object_list\":object_list}\n        return render(request,'home.html',param)\n    elif 'admin' in request.session:\n        current_user = request.session['admin']\n        object_list = ItemCategory.objects.all()\n        param = {'current_admin':current_user,\"object_list\":object_list}",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "error_404_view",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def error_404_view(request,exception):\n    return render(request,'404.html')\ndef loginAction(request):\n    if 'user_name' in request.session:\n        messages.error(request,'You are already logged in!')\n        return redirect('home')\n    elif 'admin' in request.session:\n        messages.error(request,'You are already logged in!')\n        return redirect('home')\n    else:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "loginAction",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def loginAction(request):\n    if 'user_name' in request.session:\n        messages.error(request,'You are already logged in!')\n        return redirect('home')\n    elif 'admin' in request.session:\n        messages.error(request,'You are already logged in!')\n        return redirect('home')\n    else:\n        if request.method == 'POST':\n            username = request.POST.get('username1')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "goHomePage",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def goHomePage(request):\n    return render(request, 'home.html')\ndef validation(userName,userPassword,userConfirmPassword,userEmail,userMobile,user,count,myCharacter):\n    regxEmail = re.compile(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')\n    regxMobile = re.compile(\"(0|91)?[-\\s]?[6-9][0-9]{9}\")\n    error_message = None\n    if(not userName):\n        error_message = \"Username is required!\"\n    elif userName:\n        isUserNameExistOrNot = user.isUserExists()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "validation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def validation(userName,userPassword,userConfirmPassword,userEmail,userMobile,user,count,myCharacter):\n    regxEmail = re.compile(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b')\n    regxMobile = re.compile(\"(0|91)?[-\\s]?[6-9][0-9]{9}\")\n    error_message = None\n    if(not userName):\n        error_message = \"Username is required!\"\n    elif userName:\n        isUserNameExistOrNot = user.isUserExists()\n        if (len(userName) < 6 or len(userName) > 15):\n            error_message = \"Username atleast 6 character long and maximum 15 character!\"",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "goSignUpPage",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def goSignUpPage(request):\n    if 'user_name' in request.session:\n        messages.error(request,'You are already registered!')\n        return redirect('home')\n    else: \n        if request.method == 'POST':\n            postData = request.POST\n            userName = postData.get('userName')\n            userPassword = postData.get('userPassword')\n            userConfirmPassword = postData.get('userConfirmPassword')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def logout(request):\n    if 'user_name' in request.session:\n        del request.session['user_name']\n        messages.success(request,'Logout successfully!')\n    else:\n        messages.error(request,'You are not logged in!')\n    return redirect('home')\ndef AdminLogout(request):\n    if 'admin' in request.session:\n        del request.session['admin']",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "AdminLogout",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def AdminLogout(request):\n    if 'admin' in request.session:\n        del request.session['admin']\n        messages.success(request,'Logout successfully!')\n    else:\n        messages.error(request,'You are not logged in!')\n    return redirect('home')\ndef forgot_password(request):\n    if 'user_name' in request.session:\n        messages.error(request,'You can not access the page!')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "forgot_password",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def forgot_password(request):\n    if 'user_name' in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        if request.method == \"POST\":\n            userEmail = request.POST.get('uEmail')\n            myUserEmail = None\n            error_message = None\n            success_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def change_password(request,token):\n    if 'user_name' in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:  \n        if request.method == \"POST\":\n            userNewPassword = request.POST.get('userNewPassword')\n            userSameNewPassword = request.POST.get('userSameNewPassword')\n            error_message = None\n            u1 = User.objects.get(forgot_password_token = token)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "directly_change_pass",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def directly_change_pass(request):\n    if 'user_name' not in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        if request.method == \"POST\":\n            userCurrentPassword = request.POST.get('userCurrentPassword')\n            userNewPassword = request.POST.get('userNewPassword')\n            userNewSamePassword = request.POST.get('userSameNewPassword')\n            error_message = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "user_profile",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def user_profile(request):\n    if 'user_name' not in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        u1 = User.objects.filter(user_name=request.session['user_name'])\n        u3 = User.objects.get(user_name=request.session['user_name'])\n        data = {\n            'user1':u1\n        }",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "ItemDetails",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def ItemDetails(request,cat_slug,prod_slug):\n    if 'user_name' in request.session:\n        current_user = request.session['user_name']\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        i1 = Item.objects.get(slug=prod_slug)\n        itemId = i1.iditem\n        r1 = Review.objects.filter(item_iditem=itemId)\n        try:\n            r2 = Review.objects.get(item_iditem=itemId,user_iduser=u1.iduser)\n        except:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addtocart",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addtocart(request):\n    if request.method == \"POST\":\n        if 'user_name' in request.session:\n            u1 = User.objects.get(user_name=request.session['user_name'])\n            userId = u1.iduser\n            item_id = int(request.POST.get('item_id'))\n            itemCheck = Item.objects.get(iditem=item_id)\n            if(itemCheck.offer_idoffer):\n                if(Cart.objects.filter(user_iduser=u1.iduser,item_iditem=item_id)):\n                    item_qty = int(request.POST.get('item_qty'))",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userCart",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userCart(request): \n    u1 = User.objects.get(user_name=request.session['user_name'])\n    userId = u1.iduser\n    cart1 = Cart.objects.filter(user_iduser=userId)\n    data = {\n        'userCart':cart1\n    }\n    if 'user_name' not in request.session:\n        messages.error(request,'Login to continue!')\n        return redirect('home')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "updatecart",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def updatecart(request):\n    if request.method == \"POST\":\n        item_id = int(request.POST.get('item_id'))\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        userId = u1.iduser\n        if(Cart.objects.filter(user_iduser=userId, item_iditem=item_id)):\n            item_qty = int(request.POST.get('item_qty'))\n            cart = Cart.objects.get(item_iditem=item_id,user_iduser=userId)\n            cart.item_qty = item_qty\n            cart.save()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "deletecartitem",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def deletecartitem(request):\n    if request.method == \"POST\":\n        item_id = int(request.POST.get('item_id'))\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        userId = u1.iduser\n        if(Cart.objects.filter(user_iduser=userId, item_iditem=item_id)):\n            cartitem = Cart.objects.get(item_iditem=item_id,user_iduser=userId)\n            cartitem.delete()\n        return JsonResponse({'status':\"Item removed from cart!\"})\n    return redirect('home')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "checkout",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def checkout(request):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    c1 = City.objects.all()\n    a1 = Area.objects.all()\n    a2 = Area.objects.get(pincode=u1.pincode.pincode)\n    delcharges = a2.area_delivery_charges\n    userId = u1.iduser\n    cartitems = Cart.objects.filter(user_iduser=userId)\n    cartOfferItem = Cart.objects.filter(user_iduser=userId,offer_record=0)\n    grand_total = 0",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "changecharges",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def changecharges(request):\n    if request.method == \"POST\":\n        areaname = request.POST.get('areaname')\n        a1 = Area.objects.get(area_name=areaname)\n        return JsonResponse({'status':a1.area_delivery_charges})\n    return redirect('home')\ndef placeorder(request):\n    if request.method == \"POST\":\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        userId = u1.iduser",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "placeorder",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def placeorder(request):\n    if request.method == \"POST\":\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        userId = u1.iduser\n        neworder = Order()\n        neworder.user_iduser = User.objects.get(iduser=userId)\n        neworder.orderfname = request.POST.get('fname')\n        neworder.orderlname = request.POST.get('lname')\n        neworder.orderemail = request.POST.get('email')\n        neworder.ordermobile = request.POST.get('mobile')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "razorpaycheck",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def razorpaycheck(request):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    userId = u1.iduser\n    cart = Cart.objects.filter(user_iduser=userId)\n    total_price = 0\n    a2 = Area.objects.get(pincode=u1.pincode.pincode)\n    for item in cart:\n        total_price = total_price + a2.area_delivery_charges + item.item_iditem.item_price * item.item_qty\n    return JsonResponse({\n        'total_price':total_price",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderpage",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def orderpage(request):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    userId = u1.iduser\n    orders = Order.objects.filter(user_iduser=userId)\n    context = {'userOrderData':orders}\n    return render(request,'user_order.html',context)\ndef orderdetailspage(request,t_no):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    userId = u1.iduser\n    order = Order.objects.filter(tracking_no=t_no).filter(user_iduser=userId).first()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderdetailspage",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def orderdetailspage(request,t_no):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    userId = u1.iduser\n    order = Order.objects.filter(tracking_no=t_no).filter(user_iduser=userId).first()\n    orderitems = OrderedItem.objects.filter(order_idorder=order)\n    context = {'userOrderData':order,'userOrderDetails':orderitems}\n    return render(request,'userOrderDetails.html',context)\ndef reviewsubmit(request,item_id):\n    url = request.META.get('HTTP_REFERER')\n    if 'user_name' in request.session:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "reviewsubmit",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def reviewsubmit(request,item_id):\n    url = request.META.get('HTTP_REFERER')\n    if 'user_name' in request.session:\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        userId = u1.iduser\n        try:\n            if(Review.objects.get(user_iduser=userId,item_iditem=item_id)):\n                r1 = Review.objects.get(user_iduser=userId,item_iditem=item_id)\n                ratingValue = request.POST.get('rating')\n                if(not ratingValue):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "offer",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def offer(request):\n    current_user = request.session['user_name']\n    current_date = date.today()\n    allItems = Item.objects.filter(offer_idoffer__isnull=False)\n    for i in allItems:\n        i.offer_price = (i.item_price * i.offer_idoffer.offer_value) / 100\n        i.save()\n        if(i.offer_idoffer.offer_end_date < date.today()):\n            getOffer = Offer.objects.get(idoffer=i.offer_idoffer.idoffer)\n            getOffer.delete()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderCancel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def orderCancel(request):\n    if request.method == \"POST\":\n        order_id = request.POST.get('order_id')\n        userOrder = Order.objects.get(tracking_no=order_id)\n        currentDateTime1 = datetime.now()\n        a = datetime(currentDateTime1.year,currentDateTime1.month,currentDateTime1.day,currentDateTime1.hour,currentDateTime1.minute,currentDateTime1.second)\n        b = datetime(userOrder.created_at.year,userOrder.created_at.month,userOrder.created_at.day,userOrder.created_at.hour,userOrder.created_at.minute,userOrder.created_at.second)\n        c = a - b\n        totalMinutes = int(c.total_seconds() / 60)\n        if(totalMinutes > 5):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userNotifications",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userNotifications(request):\n    try:\n        currentUser = User.objects.get(user_name=request.session['user_name'])\n    except:\n        print(\"error!\")\n    notificationsOfCurrentUser = Notification.objects.all()\n    data = {'userNotifications':notificationsOfCurrentUser,'current_user':currentUser}\n    return render(request,'userNotification.html',data)    \ndef bookTable(request):\n    if 'user_name' not in request.session:",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "bookTable",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def bookTable(request):\n    if 'user_name' not in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        u1 = User.objects.get(user_name=request.session['user_name'])\n        totalGuestNum = TotalGuest.objects.all()\n        data = {'current_user':u1,'totalGuestNum':totalGuestNum}\n        return render(request,'book-table.html',data)   \ndef load_tables(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "load_tables",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def load_tables(request):\n    guestId = request.GET.get('guestId')\n    totalCapacity = 0\n    tablesData = Table.objects.all()\n    for i in tablesData:\n        totalCapacity = totalCapacity + i.table_capacity\n    if(totalCapacity < int(guestId)):\n        tablesData = Table.objects.none()\n    elif(totalCapacity >= int(guestId)):\n        tablesData = Table.objects.all()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "findTotalCost",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def findTotalCost(usertotaltable,usertotalguest):\n    totalCost = None\n    if((int(usertotaltable) * 4) != int(usertotalguest)):\n        if((int(usertotaltable) * 4) > int(usertotalguest)):\n            totalNonePayable = (int(usertotaltable) * 4) - int(usertotalguest);\n            tmp = (int(usertotaltable) * 4) - totalNonePayable;\n            totalCost = tmp * 100;\n        elif((int(usertotaltable) * 4) < int(usertotalguest)):\n            totalNonePayable = int(usertotalguest) - (int(usertotaltable) * 4);\n            tmp = int(usertotalguest) - totalNonePayable;",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "tableRes",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def tableRes(request):\n    if 'user_name' not in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        if request.method == \"POST\":\n            u1 = User.objects.get(user_name=request.session['user_name'])\n            tableDetailsSecond = Table.objects.first()\n            currentDateTime1 = datetime.now()\n            currentDateTime1str = currentDateTime1.strftime('%Y-%m-%d %I:%M')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userTabReser",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userTabReser(request):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    tableReservations = TableReservation.objects.filter(user_iduser=u1.iduser)\n    context = {'tableReservations':tableReservations}\n    return render(request,'userTableReservation.html',context)\ndef userTableReservationDetail(request,tab_id):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    tableReservationUserDeails = TableReservation.objects.filter(idtable_reservation=tab_id).filter(user_iduser=u1.iduser).first()\n    context = {'tableReservationUserDeails':tableReservationUserDeails}\n    return render(request,'userTableReservationDetails.html',context)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "userTableReservationDetail",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def userTableReservationDetail(request,tab_id):\n    u1 = User.objects.get(user_name=request.session['user_name'])\n    tableReservationUserDeails = TableReservation.objects.filter(idtable_reservation=tab_id).filter(user_iduser=u1.iduser).first()\n    context = {'tableReservationUserDeails':tableReservationUserDeails}\n    return render(request,'userTableReservationDetails.html',context)\ndef cancelTableReservation(request):\n    if request.method == \"POST\":\n        tableDetails = Table.objects.first()\n        table_reservation_id = request.POST.get('table_reservation_id')\n        userTableReservation = TableReservation.objects.get(idtable_reservation=table_reservation_id)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "cancelTableReservation",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def cancelTableReservation(request):\n    if request.method == \"POST\":\n        tableDetails = Table.objects.first()\n        table_reservation_id = request.POST.get('table_reservation_id')\n        userTableReservation = TableReservation.objects.get(idtable_reservation=table_reservation_id)\n        currentDateTime1 = datetime.now()\n        currentTableResercationDate = userTableReservation.table_reservation_date_time\n        tableResDate3 = currentTableResercationDate.strftime('%Y-%m-%d %I:%M')\n        currentDateTime1str = currentDateTime1.strftime('%Y-%m-%d %I:%M')\n        tableResDate1 = datetime.strptime(tableResDate3,'%Y-%m-%d %I:%M')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "ProjectadminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def ProjectadminPanel(request):\n    if 'admin' not in request.session:\n        messages.error(request,\"Request denied!\")\n        return redirect('home')\n    restrorant = Restaurant.objects.first()\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "AddAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def AddAdmin(request):\n    if request.method == 'POST':\n        postData = request.POST\n        userName = postData.get('userName')\n        userPassword = postData.get('userPassword')\n        userConfirmPassword = postData.get('userConfirmPassword')\n        userEmail = postData.get('userEmail')\n        userMobile = postData.get('userMobileNo')\n        userSecQue = postData.get('userSecQue')\n        userSecAns = postData.get('userSecAns')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def AdminProfile(request):\n    if 'admin' not in request.session:\n        messages.error(request,'You can not access the page!')\n        return redirect('home')\n    else:\n        u1 = User.objects.filter(user_name=request.session['admin'])\n        u3 = User.objects.get(user_name=request.session['admin'])\n        data = {\n            'user1':u1\n        }",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "EditCafeData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def EditCafeData(request):\n    if request.method == \"POST\":\n        cafeName = request.POST.get('cafeName')\n        cafeEmail = request.POST.get('cafeEmail')\n        cafeMobile = request.POST.get('cafeMobile')\n        cafeDesc = request.POST.get('cafeDesc')\n        cafeAddress = request.POST.get('cafeAddress')\n        RestaurantData = Restaurant.objects.first()\n        RestaurantData.restaurant_name = cafeName\n        RestaurantData.restaurant_email = cafeEmail",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "UserAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def UserAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allUserDetails = User.objects.filter(is_admin=0).order_by('iduser')\n    paginator = Paginator(allUserDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOrderedItemAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOrderedItemAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allOrderedItem = OrderedItem.objects.all().order_by('item_iditem')\n    paginator = Paginator(allOrderedItem,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allAreaAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allAreaAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allAreaDetails = Area.objects.all().order_by('pincode')\n    paginator = Paginator(allAreaDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allAreaAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allAreaAdminPanelUpdate(request,pincode):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        areaPincode = request.POST.get('pincode')\n        areaName = request.POST.get('areaName')\n        areadek = request.POST.get('delCharges')\n        if(Area.objects.filter(pincode = int(areaPincode)).exists()):\n            areaDetails = Area.objects.get(pincode = int(areaPincode))\n            areaDetails.pincode = areaPincode\n            areaDetails.area_name = areaName",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allAreaAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allAreaAdminPanelDelete(request,pincode):\n    url = request.META.get('HTTP_REFERER')\n    areaDelete = Area.objects.filter(pincode=pincode)\n    areaDelete.delete()\n    messages.success(request,\"Area deleted!\")\n    return redirect(url)\ndef allOrderAdminPanelUpdate(request,idorder):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        orderstatus = request.POST.get('orderStatus')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOrderAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOrderAdminPanelUpdate(request,idorder):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        orderstatus = request.POST.get('orderStatus')\n        orderUpdate = Order.objects.get(idorder=idorder)\n        orderUpdate.order_status = orderstatus\n        orderUpdate.save()\n        messages.success(request,\"Order Updated!\")\n        return redirect(url)\n    return render(request,'allOrderAdminPanel.html')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOrderAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOrderAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allOrderDetails = Order.objects.filter(is_cancel_order=0).order_by('idorder')\n    paginator = Paginator(allOrderDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allCancelOrderAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allCancelOrderAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allCancelOrderDetails = Order.objects.filter(is_cancel_order=1).order_by('idorder')\n    paginator = Paginator(allCancelOrderDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemCategoryAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemCategoryAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItemCategory = ItemCategory.objects.all().order_by('iditem_category')\n    paginator = Paginator(allItemCategory,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allsubCategoryAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allsubCategoryAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItemCategory = ItemCategory.objects.all()\n    allsubCategory = Subcategory.objects.all().order_by('idsubcategory')\n    paginator = Paginator(allsubCategory,7,orphans=1)\n    page_number = request.GET.get('page')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemCategoryAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemCategoryAdminPanelUpdate(request,id_itemCat):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        catName = request.POST.get('catName')\n        catDesc = request.POST.get('catDesc')\n        itemCategoryData = ItemCategory.objects.get(iditem_category=id_itemCat)\n        itemCategoryData.item_category_name = catName\n        itemCategoryData.item_category_description = catDesc\n        if(len(request.FILES) != 0):\n            catimage = request.FILES['catImage']",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allsubCategoryAdminUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allsubCategoryAdminUpdate(request,id_itemCat):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        catName = request.POST.get('catName')\n        catDesc = request.POST.get('catDesc')\n        itemCategoryData = Subcategory.objects.get(idsubcategory=id_itemCat)\n        itemCategoryData.subcategory_name = catName\n        itemCategoryData.subcategory_description = catDesc\n        if(len(request.FILES) != 0):\n            catimage = request.FILES['catImage']",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemCategoryAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemCategoryAdminPanelDelete(request,id_itemCat):\n    url = request.META.get('HTTP_REFERER')\n    itemCatDelete = ItemCategory.objects.filter(iditem_category=id_itemCat)\n    itemCatDelete.delete()\n    messages.success(request,\"Item category deleted!\")\n    return redirect(url)\n#allsubCategoryAdminPanelDelete\ndef allsubCategoryAdminPanelDelete(request,id_itemCat):\n    url = request.META.get('HTTP_REFERER')\n    itemCatDelete = Subcategory.objects.filter(idsubcategory=id_itemCat)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allsubCategoryAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allsubCategoryAdminPanelDelete(request,id_itemCat):\n    url = request.META.get('HTTP_REFERER')\n    itemCatDelete = Subcategory.objects.filter(idsubcategory=id_itemCat)\n    itemCatDelete.delete()\n    messages.success(request,\"Item category deleted!\")\n    return redirect(url)\ndef allItemAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItem = Item.objects.all().order_by('iditem')\n    allItemCategory = Subcategory.objects.all()\n    paginator = Paginator(allItem,8,orphans=1)\n    page_number = request.GET.get('page')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemAdminPanelUpdate(request,id_item):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        itemName = request.POST.get('itemName')\n        itemPrice = request.POST.get('itemPrice')\n        itemCat = request.POST.get('Catitem')\n        itemDesc = request.POST.get('itemDesc')\n        print(\"id_item ===== \",id_item)\n        print(\"itemCat======\",itemCat)\n        itemData = Item.objects.get(iditem=id_item)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allItemAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allItemAdminPanelDelete(request,id_item):\n    url = request.META.get('HTTP_REFERER')\n    itemDelete = Item.objects.filter(iditem=id_item)\n    itemDelete.delete()\n    messages.success(request,\"Item deleted!\")\n    return redirect(url)\ndef allOfferAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOfferAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOfferAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItems = Item.objects.all()\n    allOfferItems = Item.objects.filter(offer_idoffer__isnull=False).order_by('iditem')\n    paginator = Paginator(allOfferItems,7,orphans=1)\n    page_number = request.GET.get('page')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOfferAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOfferAdminPanelUpdate(request,id_itemOfferId):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        offerItemName = request.POST.get('Offeritem')\n        offerStartDate = request.POST.get('offerstartDate')\n        offerEndDate = request.POST.get('offerendDate')\n        offerValue = request.POST.get('offerValue')\n        offerDesc = request.POST.get('offerDesc')\n        rmofferItemData = Item.objects.get(iditem=id_itemOfferId)\n        offerId = Offer.objects.get(idoffer=rmofferItemData.offer_idoffer.idoffer)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allOfferAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allOfferAdminPanelDelete(request,id_itemOfferId):\n    url = request.META.get('HTTP_REFERER')\n    itemOfferDelete = Item.objects.get(iditem=id_itemOfferId)\n    OfferDeleteData = Offer.objects.filter(idoffer=itemOfferDelete.offer_idoffer.idoffer)\n    itemOfferDelete.offer_idoffer = None\n    OfferDeleteData.delete()\n    itemOfferDelete.save()\n    messages.success(request,\"Offer deleted!\")\n    return redirect(url)\ndef allTableReservationAdminPanel(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allTableReservationAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allTableReservationAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allTableReservationDetails = TableReservation.objects.filter(is_table_reservation_cancel=0).order_by('idtable_reservation')\n    paginator = Paginator(allTableReservationDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allCancelTableReservationAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allCancelTableReservationAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allCancelTableReservationDetails = TableReservation.objects.filter(is_table_reservation_cancel=1).order_by('idtable_reservation')\n    paginator = Paginator(allCancelTableReservationDetails,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "tableDetailsAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def tableDetailsAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    tableDetails = Table.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'tableDetails':tableDetails}\n    return render(request,'tableAdminPanel.html',data)\ndef tableDetailsAdminPanellUpdate(request,id_table):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "tableDetailsAdminPanellUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def tableDetailsAdminPanellUpdate(request,id_table):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        totalTable = request.POST.get('totalTableData')\n        tableData = Table.objects.first()\n        tableData.total_table = int(totalTable)\n        tableData.save()\n        messages.success(request,\"Table Data Updated!\")\n        return redirect(url)\n    return render(request,'offerAdminPanel.html')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allSupplierAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allSupplierAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    supplier = Supplier.objects.all().order_by('idsupplier')\n    paginator = Paginator(supplier,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "supplierAdminPanelUpdate1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def supplierAdminPanelUpdate1(request,id_supplier):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        sName = request.POST.get('supplierName')\n        sMobile = request.POST.get('supplierMobile')\n        sAddress = request.POST.get('sAddress')\n        sAreaName = request.POST.get('supplierAreaName')\n        sPincode = request.POST.get('spincode')\n        currentSupplierData = Supplier.objects.get(idsupplier=id_supplier)\n        currentSupplierData.supplier_name = sName",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "supplierAdminPanelDelete1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def supplierAdminPanelDelete1(request,id_supplier):\n    url = request.META.get('HTTP_REFERER')\n    supplierData = Supplier.objects.filter(idsupplier=id_supplier)\n    supplierData.delete()\n    messages.success(request,\"Supplier deleted!\")\n    return redirect(url)\ndef addSupplierAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addSupplierAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addSupplierAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    areaData = Area.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'areaData':areaData}\n    return render(request,'addSupplierAdminPanel.html',data)\ndef addSupplierAdminData1(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addSupplierAdminData1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addSupplierAdminData1(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        sName = request.POST.get('supplierName')\n        sMobile = request.POST.get('supplierMobile')\n        sAddress = request.POST.get('sAddress')\n        sAreaName = request.POST.get('sArea')\n        restaurantData = Restaurant.objects.first()\n        getArea = Area.objects.get(pincode=sAreaName) \n        supplierData = Supplier.objects.create(",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addPurchaseRawMaterialAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addPurchaseRawMaterialAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allSupplierData = Supplier.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allSupplierData':allSupplierData}\n    return render(request,'addPurchaseRawMaterial.html',data)\ndef addPurchaseRawMaterialAdminData1(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addPurchaseRawMaterialAdminData1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addPurchaseRawMaterialAdminData1(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        rName = request.POST.getlist('rName')\n        rqty = request.POST.getlist('rawMatQ')\n        rPrice = request.POST.getlist('rawMatPrice')\n        rSupplier = request.POST.get('selectSupplier')\n        totalPrice = 0\n        restaurantData = Restaurant.objects.first()\n        supplierData = Supplier.objects.get(idsupplier=rSupplier)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allPurchaseRawMaterialAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allPurchaseRawMaterialAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allSupplierData = Supplier.objects.all()\n    purchaseRawMaterialData = PurchaseRawMaterial.objects.all().order_by('raw_material_idraw_material')\n    paginator = Paginator(purchaseRawMaterialData,7,orphans=1)\n    page_number = request.GET.get('page')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseRawMaterialDataUpdateAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def purchaseRawMaterialDataUpdateAdminPanel(request,id_rawmaterial):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        rName = request.POST.get('rName')\n        rQty = request.POST.get('rQty')\n        rPrice = request.POST.get('rPrice')\n        sChange = request.POST.get('supplierChange')\n        totalPriceofOldRawMaterial = 0\n        totalPriceofNewRawMaterial = 0\n        getCurrentRawMaterialData = RawMaterial.objects.get(idraw_material=id_rawmaterial)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseRawMaterialDataReturnAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def purchaseRawMaterialDataReturnAdminPanel(request,id_rawmaterial):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        totalPriceofOldRawMaterial = 0\n        totalPriceofNewRawMaterial = 0\n        totalPurchaseReturnAmount = 0\n        purchaseReturnExist = None\n        purchaseReturnData = None\n        purchaseReturnDataRawMaterial = None\n        rQty = request.POST.get('rQty')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allRawMaterialAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allRawMaterialAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allRawMaterialData = RawMaterial.objects.all().order_by('idraw_material')\n    paginator = Paginator(allRawMaterialData,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allRawMaterialAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allRawMaterialAdminPanelUpdate(request,id_rawmat):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        rQty = request.POST.get('rQty')\n        purchaseData = PurchaseRawMaterial.objects.get(raw_material_idraw_material=id_rawmat)\n        if(int(rQty) <= 0 or int(rQty) > purchaseData.quantity):\n            messages.success(request,\"Invalid Quantity!\")\n            return redirect(url)\n        rawMaterialData = RawMaterial.objects.get(idraw_material=id_rawmat)\n        rawMaterialData.raw_materialtotal_quantity = int(rQty)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allPurchaseAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allPurchaseAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseData = Purchase.objects.all().order_by('idpurchase')\n    paginator = Paginator(allPurchaseData,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allPurchaseReturnAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allPurchaseReturnAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnData = PurchaseReturn.objects.all().order_by('idpurchase_return')\n    paginator = Paginator(allPurchaseReturnData,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "allPurchaseRawMaterialReturnAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def allPurchaseRawMaterialReturnAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnRawMaterialData = PurchaseReturnOfRawMaterial.objects.all().order_by('raw_material_idraw_material')\n    paginator = Paginator(allPurchaseReturnRawMaterialData,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "notificationAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def notificationAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    notification = Notification.objects.all().order_by('idnotification')\n    paginator = Paginator(notification,7,orphans=1)\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "notificationAdminPanelUpdate",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def notificationAdminPanelUpdate(request,id_notification):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        notificationDesc = request.POST.get('notificationDesc')\n        notificationData = Notification.objects.get(idnotification=id_notification)\n        notificationData.notification_description = notificationDesc\n        notificationData.save()\n        messages.success(request,\"Notification Data Updated!\")\n        return redirect(url)\n    return render(request,'notificationAdmin.html')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "notificationAdminPanelDelete",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def notificationAdminPanelDelete(request,id_notification):\n    url = request.META.get('HTTP_REFERER')\n    notificationDeleteData = Notification.objects.filter(idnotification=id_notification)\n    notificationDeleteData.delete()\n    messages.success(request,\"Notification deleted!\")\n    return redirect(url)\ndef addAreaAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addAreaAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addAreaAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    return render(request,'addAreaAdminPanel.html',data)\ndef addAreaAdminPanelData1(request):\n    url = request.META.get('HTTP_REFERER')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addAreaAdminPanelData1",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addAreaAdminPanelData1(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        cityData = City.objects.first()\n        allAreaData = Area.objects.all()\n        pincode = request.POST.get('pincode')\n        areaName = request.POST.get('areaName')\n        delCharges = request.POST.get('delCharges')\n        for i in allAreaData:\n            if(i.pincode == int(pincode)):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addItemCatAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addItemCatAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    return render(request,'addItemCategory.html',data)\n#subcategory\ndef addsubCatAdminPanel(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addsubCatAdminPanel",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addsubCatAdminPanel(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allitemcategory = ItemCategory.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,\"allitemcategory\":allitemcategory}\n    return render(request,'addsubCatAdminPanel.html',data)\ndef addItemCatAdminPanellData(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addItemCatAdminPanellData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addItemCatAdminPanellData(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        RestaurantData = Restaurant.objects.first()\n        catName = request.POST.get('catName')\n        catDesc = request.POST.get('catDesc')\n        allCatData = ItemCategory.objects.all()\n        if(ItemCategory.objects.filter(item_category_name__icontains=catName)):\n            messages.error(request,'Category already exist!')\n            return redirect(url)",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addsubCatAdminPanelData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addsubCatAdminPanelData(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        RestaurantData = Restaurant.objects.first()\n        catName = request.POST.get('catName')\n        catDesc = request.POST.get('catDesc')\n        catItem = request.POST.get('Catitem')\n        allCatData = Subcategory.objects.all()\n        getCategory = ItemCategory.objects.get(item_category_name=catItem)\n        if(Subcategory.objects.filter(subcategory_name=catName)):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addItemAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addItemAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItemCategory = Subcategory.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allItemCategory':allItemCategory}\n    return render(request,'addItemAdminPanel.html',data)\n# def addItemAdminPanellData(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addItemAdminPanellData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addItemAdminPanellData(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        itemName = request.POST.get('itemName')\n        itemPrice = request.POST.get('itemPrice')\n        catItem = request.POST.get('Catitem')\n        print(\"catItem================== \",catItem)\n        itemDesc = request.POST.get('itemDesc')\n        allItemData = Item.objects.all()\n        uniqueString = str(uuid.uuid4())",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addOfferAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addOfferAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allItems = Item.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allItems':allItems}\n    return render(request,'addOfferAdminPanel.html',data)\ndef addOfferAdminPanellData(request):",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addOfferAdminPanellData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addOfferAdminPanellData(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        offerValue = request.POST.get('offerValue')\n        offerStartDate = request.POST.get('offerstartDate')\n        offerEndDate = request.POST.get('offerendDate')\n        offerItem = request.POST.get('item')\n        offerDescription = request.POST.get('offerDesc')\n        getItem = Item.objects.get(item_name=offerItem)\n        offerData = Offer()",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addNotificationAdminPanell",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addNotificationAdminPanell(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    return render(request,'addNotificationAdminPanel.html',data)\ndef addNotificationAdminPanellData(request):\n    url = request.META.get('HTTP_REFERER')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "addNotificationAdminPanellData",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def addNotificationAdminPanellData(request):\n    url = request.META.get('HTTP_REFERER')\n    if request.method == \"POST\":\n        notificationDesc = request.POST.get('notificationDesc')\n        notificationData = Notification()\n        notificationData.notification_description = notificationDesc\n        notificationData.save()\n        messages.success(request,'Notification Added!')\n        return redirect(url)\n    return render(request,'addNotificationAdminPanel.html')",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "reportBrewerOrderAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def reportBrewerOrderAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allOrderData = Order.objects.filter(is_cancel_order=0)\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allOrderData':allOrderData}\n    return render(request,'report.html',data)\nsdate = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderReport",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def orderReport(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global sdate\n        global edate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "brewerCancelOrder",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def brewerCancelOrder(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allCancelOrderData = Order.objects.filter(is_cancel_order=1)\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allCancelOrderData':allCancelOrderData}\n    return render(request,'cancelOrderReport.html',data)\ncsdate = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderCancelReportAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def orderCancelReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global csdate\n        global cedate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "brewerOffer",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def brewerOffer(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allOfferItems = Offer.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allOfferItems':allOfferItems}\n    return render(request,'offerReport.html',data)\nOffersdate = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "offerReportAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def offerReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global Offersdate\n        global Offeredate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "brewerPurchase",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def brewerPurchase(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseData = Purchase.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseData':allPurchaseData}\n    return render(request,'purchaseReport.html',data)\nPurchasesdate = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseReportAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def purchaseReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseData = Purchase.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseData':allPurchaseData}\n    if request.method == \"POST\":\n        global Purchasesdate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "brewerPurchaseReturn",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def brewerPurchaseReturn(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnData = PurchaseReturn.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseReturnData':allPurchaseReturnData}\n    return render(request,'purchaseReturnReport.html',data)\nPurchaseReturnsdate = None",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "purchaseReturnReportAdmin",
        "kind": 2,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "def purchaseReturnReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnData = PurchaseReturn.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseReturnData':allPurchaseReturnData}\n    if request.method == \"POST\":\n        global PurchaseReturnsdate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "orderPlacedMinutes",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "orderPlacedMinutes = None\ndef isFirstThreeCharacterLetter(subUname):\n    count = 0\n    firstThreeCh = subUname[0:3]\n    for i in firstThreeCh:\n        if((i >= \"A\" and i <= \"Z\") or (i >= \"a\" and i <= \"z\")):\n            count += 1\n        else:\n            break\n    return count",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "sdate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "sdate = None\nedate = None\ndef orderReport(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "edate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "edate = None\ndef orderReport(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global sdate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "csdate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "csdate = None\ncedate = None\ndef orderCancelReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "cedate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "cedate = None\ndef orderCancelReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global csdate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "Offersdate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "Offersdate = None\nOfferedate = None\ndef offerReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "Offeredate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "Offeredate = None\ndef offerReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer}\n    if request.method == \"POST\":\n        global Offersdate",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "Purchasesdate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "Purchasesdate = None\nPurchaseedate = None\ndef purchaseReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseData = Purchase.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseData':allPurchaseData}",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "Purchaseedate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "Purchaseedate = None\ndef purchaseReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseData = Purchase.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseData':allPurchaseData}\n    if request.method == \"POST\":",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "PurchaseReturnsdate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "PurchaseReturnsdate = None\nPurchaseReturnedate = None\ndef purchaseReturnReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnData = PurchaseReturn.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseReturnData':allPurchaseReturnData}",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "PurchaseReturnedate",
        "kind": 5,
        "importPath": "Brewer_Cafe_And_Restro.views",
        "description": "Brewer_Cafe_And_Restro.views",
        "peekOfCode": "PurchaseReturnedate = None\ndef purchaseReturnReportAdmin(request):\n    u3 = User.objects.get(user_name=request.session['admin'])\n    totalAdmin = User.objects.filter(is_admin=1).count()\n    totalUser = User.objects.filter(is_admin=0).count()\n    totalItems = Item.objects.all().count()\n    totalOffer = Offer.objects.all().count()\n    allPurchaseReturnData = PurchaseReturn.objects.all()\n    data = {'currentAdmin':u3,'totalAdmin':totalAdmin,'totalUser':totalUser,'totalItem':totalItems,'totalOffer':totalOffer,'allPurchaseReturnData':allPurchaseReturnData}\n    if request.method == \"POST\":",
        "detail": "Brewer_Cafe_And_Restro.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "myProject.asgi",
        "description": "myProject.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "myProject.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-^+l0i1@s)+p$5mlal9n*tc-6lntsq)-8e4!(6t-(tp4k_)4@@4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-^+l0i1@s)+p$5mlal9n*tc-6lntsq)-8e4!(6t-(tp4k_)4@@4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Brewer_Cafe_And_Restro.apps.BrewerCafeAndRestroConfig'",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'Brewer_Cafe_And_Restro.apps.BrewerCafeAndRestroConfig'\n]\nMIDDLEWARE = [",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'myProject.urls'",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "ROOT_URLCONF = 'myProject.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / \"templates\"],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / \"templates\"],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "WSGI_APPLICATION = 'myProject.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nelse:",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nelse:\n  STATIC_ROOT = os.path.join(BASE_DIR, 'static')",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nelse:\n  STATIC_ROOT = os.path.join(BASE_DIR, 'static')",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nelse:\n  STATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Email\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nif DEBUG:\n  STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nelse:\n  STATIC_ROOT = os.path.join(BASE_DIR, 'static')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Email\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Email\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'milanthesiya53@gmail.com'\nEMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'milanthesiya53@gmail.com'\nEMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_HOST_USER = 'milanthesiya53@gmail.com'\nEMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = 'milanthesiya53@gmail.com'\nEMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'milanthesiya53@gmail.com'\nEMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}\n# LOGGING = {",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'guuuquvjyacmihew'\nEMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}\n# LOGGING = {\n#     'version': 1,",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': True,",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': True,\n#     # 'disable_existing_loggers': False,\n#     'filters': {\n#         'require_debug_false': {",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "myProject.settings",
        "description": "myProject.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.ERROR: 'danger'\n}\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': True,\n#     # 'disable_existing_loggers': False,\n#     'filters': {\n#         'require_debug_false': {\n#             '()': 'django.utils.log.RequireDebugFalse',",
        "detail": "myProject.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "myProject.urls",
        "description": "myProject.urls",
        "peekOfCode": "urlpatterns = [\n    re_path(r'^media/(?P<path>.*)$', serve,{'document_root': settings.MEDIA_ROOT}),\n    re_path(r'^static/(?P<path>.*)$', serve,{'document_root': settings.STATIC_ROOT}),\n    path('admin/', admin.site.urls),\n    path('',views.home,name='home'),\n    path('login/',views.loginAction,name='login'),\n    path('signup/',views.goSignUpPage,name='signup'),\n    path('logout/',views.logout, name='logout'),\n    path('forgot_password/',views.forgot_password,name='forgot_password'),\n    path('change_password/<token>/',views.change_password,name='change_password'),",
        "detail": "myProject.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "myProject.urls",
        "description": "myProject.urls",
        "peekOfCode": "handler404 = 'Brewer_Cafe_And_Restro.views.error_404_view'",
        "detail": "myProject.urls",
        "documentation": {}
    },
    {
        "label": "random_string_generator",
        "kind": 2,
        "importPath": "myProject.utils",
        "description": "myProject.utils",
        "peekOfCode": "def random_string_generator(size=10, chars=string.ascii_lowercase + string.digits):\n    return ''.join(random.choice(chars) for _ in range(size))\ndef unique_slug_generator(instance, new_slug=None):\n    \"\"\"\n    This is for a Django project and it assumes your instance \n    has a model with a slug field and a title character (char) field.\n    \"\"\"\n    if new_slug is not None:\n        slug = new_slug\n    else:",
        "detail": "myProject.utils",
        "documentation": {}
    },
    {
        "label": "unique_slug_generator",
        "kind": 2,
        "importPath": "myProject.utils",
        "description": "myProject.utils",
        "peekOfCode": "def unique_slug_generator(instance, new_slug=None):\n    \"\"\"\n    This is for a Django project and it assumes your instance \n    has a model with a slug field and a title character (char) field.\n    \"\"\"\n    if new_slug is not None:\n        slug = new_slug\n    else:\n        slug = slugify(instance.item_category_name)\n    Klass = instance.__class__",
        "detail": "myProject.utils",
        "documentation": {}
    },
    {
        "label": "unique_slug_generator1",
        "kind": 2,
        "importPath": "myProject.utils",
        "description": "myProject.utils",
        "peekOfCode": "def unique_slug_generator1(instance, new_slug=None):\n    \"\"\"\n    This is for a Django project and it assumes your instance \n    has a model with a slug field and a title character (char) field.\n    \"\"\"\n    if new_slug is not None:\n        slug = new_slug\n    else:\n        slug = slugify(instance.item_name)\n    Klass = instance.__class__",
        "detail": "myProject.utils",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "myProject.wsgi",
        "description": "myProject.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "myProject.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myProject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]